//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34003
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;
using System;


public class RandomSearch{

	private Drone[] drones;
	private Vector3[] customers;
	private Chromosome chromosome;

	public RandomSearch (Vector3[] customers, Drone[] drones){
		this.drones = drones;
		this.customers = customers;

		/* Initialize Chromosome static singleton variables 
		 * (mapping between coding of solution and real points) */
		Chromosome.initChromosome (customers, drones);

	}

	public VRPsolution computeRoutes(int T /*T number of iterations*/){

		/* ordered chromosome */
		Chromosome currentSol= new Chromosome();
		double currentFitness=currentSol.computeFitnessAstar();

		/* initial best solution and best fitness */
		Chromosome bestSolSoFar = currentSol;
		double bestFitnessSoFar = currentFitness;

		Debug.Log("Initial fitness: "+ bestFitnessSoFar);
		Debug.Log ("Initial Chromosome: "+ bestSolSoFar);

		for(int i=0;i<T;i++){
			currentSol.shuffleChromosome();
			currentFitness = currentSol.computeFitnessAstar ();
			if (currentFitness < bestFitnessSoFar) {
				bestSolSoFar = new Chromosome(currentSol);
				bestFitnessSoFar = currentFitness;
			}
		}

		Debug.Log("Best Fitness after T iterations" + bestFitnessSoFar);
		Debug.Log ("Final Chromosome: "+ bestSolSoFar);

		return bestSolSoFar.buildSolution();
	}

	

}



